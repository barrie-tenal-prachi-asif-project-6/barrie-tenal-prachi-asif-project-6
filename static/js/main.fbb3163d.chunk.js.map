{"version":3,"sources":["components/Header.js","components/Zoltar.js","components/Maze.js","components/ZoltarRedEyes.js","components/Results.js","components/Instructions.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Component","Zoltar","src","alt","border","Maze","coinBoxAnimation","coin","document","querySelector","coinContainer","maze","classList","add","createMazeAndCoin","mazeLayout","mazeBox","firstChild","removeChild","mazeSquares","i","length","square","createElement","appendChild","push","state","coinCurrentIndex","setState","areArrowButtonsVisible","moveCoin","event","addEventListener","remove","keyCode","moveLeft","moveRight","moveUp","moveDown","hasCoinCompletedMaze","handleArrowClick","direction","contains","onClick","this","to","style","fontSize","ZoltarRedEyes","Results","randomizer","array","Math","floor","random","advice","props","adviceSlip","userName","emptyAdvice","Instructions","enterUserName","e","updateName","target","value","enterUserWish","userWish","handleSelect","selectedCategory","id","handleSubmit","preventDefault","getRandomAdvice","getSpecificAdvice","onSubmit","type","placeholder","required","onChange","htmlFor","name","rows","cols","Footer","href","rel","App","recivedSelectedCategory","axios","url","method","responseType","then","res","data","slips","Date","getTime","newAdvice","slip","recievedUserName","exact","path","component","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"sRAEqBA,E,uKAEb,OACI,iCACI,qBAAKC,UAAU,cAAf,SACI,uD,GALgBC,aCSrBC,EAXA,WACX,OACI,qBAAKF,UAAU,uBAAf,SACI,sBAAKA,UAAU,cAAf,UACI,qBAAKG,IAAI,sCAAsCC,IAAI,cAAcC,OAAO,MACxE,qBAAKL,UAAU,eAAeG,IAAI,0CAA0CC,IAAI,eAAeC,OAAO,Y,4ECsSvGC,E,kDAhSX,aAAe,IAAD,8BACV,gBAYJC,iBAAmB,WACf,IAAMC,EAAOC,SAASC,cAAc,cAC9BC,EAAgBF,SAASC,cAAc,2BACvCE,EAAOH,SAASC,cAAc,SACXD,SAASC,cAAc,qBAE/BG,UAAUC,IAAI,qBAG/BN,EAAKK,UAAUC,IAAI,qBACnBH,EAAcE,UAAUC,IAAI,qBAG5BF,EAAKC,UAAUC,IAAI,qBACnB,EAAKC,qBA3BK,EAiCdA,kBAAoB,WAuChB,IApCA,IAAMC,EAAa,CACf,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACvF,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,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","file":"static/js/main.fbb3163d.chunk.js","sourcesContent":["import { Component } from \"react\";\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <div className=\"constrainH1\">\r\n                    <h1>Zoltar Speaks</h1>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","const Zoltar = () => {\r\n    return (\r\n        <div className=\"zoltarImageContainer\">\r\n            <div className=\"zoltarImage\">\r\n                <img src=\"https://i.ibb.co/1JhdhBm/zoltar.jpg\" alt=\"zoltar body\" border=\"0\" />\r\n                <img className=\"zoltarMouth \" src=\"https://i.ibb.co/C6TQK03/zoltar-Jaw.png\" alt=\"zoltar mouth\" border=\"0\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Zoltar;","/* eslint-disable react/no-direct-mutation-state */\r\n/* eslint-disable default-case */\r\nimport { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward'\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward'\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\n\r\n\r\nclass Maze extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            maze: [],\r\n            hasCoinCompletedMaze: false,\r\n            coinCurrentIndex: 32,\r\n            areArrowButtonsVisible: false\r\n        };\r\n    }\r\n\r\n\r\n\r\n    // Function that initiates coin animation when user clicks the coin to insert it into the slot\r\n    coinBoxAnimation = () => {\r\n        const coin = document.querySelector('.coinImage');\r\n        const coinContainer = document.querySelector('.mazeCoinImageContainer');\r\n        const maze = document.querySelector('.maze');\r\n        const mazeInstructions = document.querySelector('.mazeInstructions');\r\n\r\n        mazeInstructions.classList.add('coinFadeAnimation');\r\n\r\n        // adding the animation classes to the coin (coin falls into the slot & then fades out)\r\n        coin.classList.add('coinDropAnimation');\r\n        coinContainer.classList.add('coinFadeAnimation');\r\n\r\n        // adding animation class to the maze (maze fades in)\r\n        maze.classList.add('mazeFadeAnimation');\r\n        this.createMazeAndCoin();\r\n    }\r\n\r\n\r\n\r\n    // Function that builds the maze & displays both the maze & coin onto the users page\r\n    createMazeAndCoin = () => {\r\n        // BUILDING MAZE ----------------------------------------\r\n        // build an example maze template within an array by using 0's (path) and 1's (wall)\r\n        const mazeLayout = [\r\n            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\r\n            2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\r\n            2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2,\r\n            2, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 2,\r\n            2, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 2,\r\n            2, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 2,\r\n            2, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2,\r\n            2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 2,\r\n            2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 2,\r\n            2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,\r\n            2, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2,\r\n            2, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 2,\r\n            2, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2,\r\n            2, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2,\r\n            2, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2,\r\n            2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 2,\r\n            2, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 2,\r\n            2, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 2,\r\n            2, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 2,\r\n            2, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 2,\r\n            2, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 2,\r\n            2, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2,\r\n            2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2,\r\n            2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 2,\r\n            2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 2,\r\n            2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 2,\r\n            2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 2,\r\n            2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 2,\r\n            2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2,\r\n            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2\r\n        ]\r\n\r\n        // DISPLAYING MAZE & COIN ----------------------------------------\r\n        // store the div with a class of grid into a variable & clear any content located within the div\r\n        const mazeBox = document.querySelector('.maze');\r\n        while (mazeBox.firstChild) {\r\n            mazeBox.removeChild(mazeBox.firstChild);\r\n        }\r\n\r\n        // create an empty array\r\n        const mazeSquares = []\r\n\r\n        // loop through the mazeLayout array & push each value into the empty mazeSquares array \r\n        for (let i = 0; i < mazeLayout.length; i++) {\r\n            // give each square within the maze a height and width, append (a big no-no for this project but fine for the experimentation stages) to the maze div being rendered, and push them all into the mazeSquares array\r\n            const square = document.createElement('div');\r\n            mazeBox.appendChild(square);\r\n            mazeSquares.push(square);\r\n\r\n            // add visual layout to the maze by making the path appear pink & the walls appear black\r\n            if (mazeLayout[i] === 0) {\r\n                mazeSquares[i].classList.add('path');\r\n            } else if (mazeLayout[i] === 1) {\r\n                mazeSquares[i].classList.add('wall');\r\n            } else if (mazeLayout[i] === 2) {\r\n                mazeSquares[i].classList.add('border');\r\n            } else if (mazeLayout[i] === 3) {\r\n                mazeSquares[i].classList.add('end');\r\n            }\r\n        }\r\n\r\n        // display coin in the maze\r\n        mazeSquares[this.state.coinCurrentIndex].classList.add('coin');\r\n\r\n        // update the maze state with the new mazeSquares array & make the arrow buttons visible by setting the areArrowButtonsVisible state to true\r\n        this.setState({\r\n            maze: mazeSquares,\r\n            areArrowButtonsVisible: true\r\n        })\r\n\r\n        // call the function that allows the user to move the coin around the maze\r\n        this.moveCoin();\r\n    }\r\n\r\n\r\n\r\n    // Function that moves the coin through the maze when the user uses up, down, left, and right arrows on their keyboard\r\n    moveCoin = (event) => {\r\n        const moveCoin = (event) => {\r\n            \r\n            // remove the coin class from the coin's starting index\r\n            this.state.maze[this.state.coinCurrentIndex].classList.remove('coin');\r\n            \r\n            switch (event.keyCode) {\r\n                case 37:\r\n                    this.moveLeft();\r\n                    break\r\n\r\n                case 39:\r\n                    this.moveRight();\r\n                    break\r\n\r\n                case 38:\r\n                    this.moveUp();\r\n                    break\r\n\r\n                case 40:\r\n                    this.moveDown();\r\n                    break\r\n            }\r\n\r\n            // add the coin class to the coin's new index\r\n            this.state.maze[this.state.coinCurrentIndex].classList.add(\"coin\");\r\n\r\n            // if the coin's current index number is 897 (ie: if the coin has completed the maze), then set the 'has coin completed maze' state to true which will display the button that allows the user to progress to the results page\r\n            if (this.state.coinCurrentIndex === 897) {\r\n                this.setState({\r\n                    hasCoinCompletedMaze: true\r\n                })\r\n            }\r\n        }\r\n        // listen for the user to click one of the 4 arrow keys within the function that moves the coin \r\n        document.addEventListener(\"keydown\", moveCoin);\r\n    }\r\n\r\n\r\n\r\n    // Function that moves the coin through the maze when the user uses up, down, left, and right buttons rendered on their browser's page\r\n        // Refer to the moveCoin, moveLeft, moveRight, moveUp, and moveDown functions for a description of logic used\r\n    handleArrowClick = (direction) => {\r\n        this.state.maze[this.state.coinCurrentIndex].classList.remove(\"coin\");\r\n\r\n        switch (direction) {\r\n            case \"up\":\r\n                this.moveUp();\r\n                break\r\n\r\n            case \"right\": \r\n                this.moveRight();\r\n                break\r\n\r\n            case \"down\":\r\n                this.moveDown();\r\n                break\r\n\r\n            case \"left\": \r\n                this.moveLeft();\r\n                break\r\n        }\r\n\r\n        this.state.maze[this.state.coinCurrentIndex].classList.add(\"coin\");\r\n\r\n        if (this.state.coinCurrentIndex === 897) {\r\n            this.setState({\r\n                hasCoinCompletedMaze: true\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // Function to move coin to the left\r\n    moveLeft = () => {\r\n        // if user hits the left arrow key:\r\n        // (a) check to see if the index number that is one below the coin's current index number (ie: check the value of the index number to the 'left' of the coin's current index number) is actually a path (ie: ensure it is not a wall)\r\n        // (b) if above condition is satisfied, subtract one from the coin's current index number\r\n        if (this.state.maze[this.state.coinCurrentIndex - 1].classList.contains('path'))\r\n            this.setState({\r\n                coinCurrentIndex: this.state.coinCurrentIndex -= 1\r\n            })\r\n    }\r\n\r\n    // Function to move coin to the right\r\n    moveRight = () => {\r\n        //  if user hits right arrow key:\r\n        // (a) check to see if the index number that is one above the coin's current index number (ie: check the value of the index number to the 'right' of the coin's current index number) is actually a path\r\n        // (b) if above condition is satisfied, add one to the coin's current index number\r\n        if (this.state.maze[this.state.coinCurrentIndex + 1].classList.contains('path'))\r\n            this.setState({\r\n                coinCurrentIndex: this.state.coinCurrentIndex += 1\r\n            })\r\n    }\r\n\r\n    // Function to move coin up\r\n    moveUp = () => {\r\n        //  if user hits up arrow key:\r\n        // (a) check to see if the coin is able to continue moving up (ie: ensure the coin's current index number subtracted by 28 is equal to or greater than 0 - because if it's less than 0 and the user hits the up arrow, the coin will disappear off of the top edge of the maze as this means the coin is currently located along the top edge of the maze (index # 0 to 27))\r\n        // (b) check to see if the index number that is 28 below the coin's current index number (ie: check the value of the index number that is directly 'on top' of the coin's current index number) is actually a path\r\n        // (c) if both above conditions are satisfied, subtract 28 from the coin's current index number (ie: the width/height of the maze)\r\n        if (this.state.coinCurrentIndex - 30 >= 0 && this.state.maze[this.state.coinCurrentIndex - 30].classList.contains('path'))\r\n            this.setState({\r\n                coinCurrentIndex: this.state.coinCurrentIndex -= 30\r\n            })\r\n    }\r\n\r\n    // Function to move coin down\r\n    moveDown = () => {\r\n        //  if user hits down arrow key:\r\n        // (a) check to see if the coin is able to continue moving down (ie: ensure that 28 added to the coin's current index number is less than 28*28 (784) - because if it's more than 784 and the user hits the down arrow, the coin will disappear off of the bottom edge of the maze as this means the coin is currently located along the bottom edge of the maze (index # 756 to 784))\r\n        // (b) check to see if the index number that is 28 above the coin's current index number (ie: check the value of the index number that is directly 'beneath' of the coin's current index number) is actually a path\r\n        // (c) if both above condition is satisfied, add 28 to the coin's current index number (ie: the width/height of the maze)\r\n        if (this.state.coinCurrentIndex + 30 < 30 * 30 && (this.state.maze[this.state.coinCurrentIndex + 30].classList.contains('path') || this.state.maze[this.state.coinCurrentIndex + 30].classList.contains('end')))\r\n            this.setState({\r\n                coinCurrentIndex: this.state.coinCurrentIndex += 30\r\n            })\r\n    }\r\n\r\n\r\n\r\n    render() { \r\n        return (\r\n            <>\r\n                <section className=\"mazeInstructionsAndImage wrapper\">\r\n                    <p className=\"mazeInstructions\">Click the top of the coin to insert it into the slot, then use the arrow keys to navigate through Zoltar's Maze!</p>\r\n                    <figure  className=\"mazeCoinImageContainer\">\r\n                        <img className=\"coinImage\" src=\"https://i.ibb.co/0Z6N088/goldCoin.png\" alt=\"a coin with a skull on it\" onClick={this.coinBoxAnimation}/>\r\n                        <img className=\"coinSlotTop\" src=\"https://i.ibb.co/t43gKMt/coin-Slot-Back.png\" alt=\"coin slot tab\" />\r\n                        <img className=\"coinSlot\" src=\"https://i.ibb.co/QD0CYkf/coin-Slot-Front.png\" alt=\"insert a coin in this box\" />\r\n                    </figure>\r\n\r\n                    <div className=\"maze\">\r\n                        {/* conditionally render the results button only when the user as navigated the coin to the end of the maze */}\r\n                        {\r\n                            (this.state.hasCoinCompletedMaze)\r\n                            ?\r\n                            <Link to=\"/results\">\r\n                                <button className=\"resultsButton\">Click For Results</button>\r\n                            </Link>\r\n                            : null\r\n                        }\r\n                        {/* conditionally render the arrow buttons only when the maze appears */}\r\n                        {\r\n                            (this.state.areArrowButtonsVisible)\r\n                            ?\r\n                            <div className=\"arrowButtonsContainer\">\r\n                                <div className=\"arrowButtonsGrid\">\r\n                                    <div className=\"buttonGridDivs\"></div>\r\n                                    <button className=\"arrowButton upArrowButton\" onClick={() => {this.handleArrowClick(\"up\")}}>\r\n                                        <ArrowUpwardIcon style={{ fontSize: 40 }} className=\"arrowIcons\" />\r\n                                    </button>\r\n                                    <div className=\"buttonGridDivs\"></div>\r\n                                    <button className=\"arrowButton leftArrowButton\" onClick={() => {this.handleArrowClick(\"left\")}}>\r\n                                        <ArrowBackIcon style={{ fontSize: 40 }} className=\"arrowIcons\" />\r\n                                    </button>\r\n                                    <button className=\"arrowButton downArrowButton\" onClick={() => {this.handleArrowClick(\"down\")}}>\r\n                                        <ArrowDownwardIcon style={{ fontSize: 40 }} className=\"arrowIcons\" />\r\n                                    </button>\r\n                                    <button className=\"arrowButton rightArrowButton\" onClick={() => {this.handleArrowClick(\"right\")}}>\r\n                                        <ArrowForwardIcon style={{ fontSize: 40 }} className=\"arrowIcons\" />\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Maze;","const ZoltarRedEyes = () => {\r\n    return (\r\n        <div className=\"zoltarImageContainer\">\r\n            <div className=\"zoltarImage\">\r\n                <img className=\"zoltarRedEyes\" src=\"https://i.ibb.co/Qp6wSJD/zoltar-red.jpg\" alt=\"zoltar with red eyes\" border=\"0\" />\r\n                <img src=\"https://i.ibb.co/1JhdhBm/zoltar.jpg\" alt=\"zoltar body\" border=\"0\" />\r\n                <img className=\"zoltarRedEyesMouth\" src=\"https://i.ibb.co/C6TQK03/zoltar-Jaw.png\" alt=\"zoltar mouth\" border=\"0\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ZoltarRedEyes;","import { Component } from 'react';\r\nimport ZoltarRedEyes from './ZoltarRedEyes.js';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Results extends Component {\r\n  // Function that generates a random number that will be used to pick a random advice object from the adviceSlip array\r\n  randomizer = (array) => {\r\n    // store a generated random integer which does not exceed the length of the array\r\n    const randomNumber = Math.floor(Math.random() * array.length);\r\n    return array[randomNumber].advice;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className=\"Results\">\r\n        <ZoltarRedEyes />\r\n\r\n        <div className=\"wishContainer wrapper\">\r\n          <img className=\"cornerImage topLeftCornerImage\" src=\"https://i.ibb.co/pXsj53Z/top-Left-Corner.png\" alt=\"a decorative corner drawing of an abstract bird\" />\r\n          <img className=\"cornerImage topRightCornerImage\" src=\"https://i.ibb.co/j6nyngG/top-Right-Corner.png\" alt=\"a decorative corner drawing of an abstract bird\" />\r\n          <img className=\"cornerImage bottomLeftCornerImage\" src=\"https://i.ibb.co/wLTHwJh/bottom-Left-Corner.png\" alt=\"a decorative corner drawing of an abstract bird\" />\r\n          <img className=\"cornerImage bottomRightCornerImage\" src=\"https://i.ibb.co/BNKzc4S/bottom-Right-Corner.png\" alt=\"a decorative corner drawing of an abstract bird\" />\r\n\r\n          {/* if the adviceSlip array is empty, they render a generic piece of advice. otherwise, display a random piece of advice from the adviceSlip array. */}\r\n          {\r\n            (this.props.adviceSlip.length === 0)\r\n              ? \r\n              <div>\r\n                <h2>Your wish has been granted!!!</h2>\r\n                <p> A person of words and not deeds is like a garden full of weeds. </p>\r\n              </div>\r\n              : \r\n              <div>\r\n                <h2>{this.props.userName}, your wish has been granted!</h2>\r\n                <p>\r\n                  {\r\n                    this.randomizer(this.props.adviceSlip)\r\n                  }\r\n                </p>\r\n              </div>\r\n          }\r\n\r\n            <Link to=\"/\">\r\n              <button className=\"resetWish\" onClick={this.props.emptyAdvice}>Make another wish</button>\r\n            </Link>\r\n        </div>\r\n\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Results;","import { Link } from 'react-router-dom';\r\nimport { Component } from 'react';\r\n\r\n\r\nclass Instructions extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            selectedCategory: \"\",\r\n            userWish: \"\"\r\n        }\r\n    }\r\n\r\n    // Function for grabbing & storing the user's name\r\n    enterUserName = (e) => {\r\n        this.props.updateName(e.target.value);\r\n    }\r\n\r\n    // Function for grabbing & storing the user's wish description\r\n    enterUserWish = (e) => {\r\n        this.setState({\r\n            userWish: e.target.value\r\n        })\r\n    }\r\n\r\n    // Function for grabbing & storing the user's wish category\r\n    handleSelect = (e) => {\r\n        this.setState({\r\n            selectedCategory: e.target.id\r\n        })\r\n    }\r\n\r\n    // Function for calling the API functions depending on the user's wish category choice\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // If the user chooses the wish category of 'other', call the function that initiates an API call to the random advice generator. If the user selects any other wish category, then call the function that initiates an API call to the specific advice generator, passing through their chosen wish category as an argument to ensure related advice is received.\r\n        if (this.state.selectedCategory === 'other'){\r\n            this.props.getRandomAdvice();\r\n        } else {\r\n            this.props.getSpecificAdvice(this.state.selectedCategory);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper instructionsFormContainer\">\r\n                <img className=\"cornerImage topLeftCornerImage\" src=\"https://i.ibb.co/pXsj53Z/top-Left-Corner.png\" alt=\"a decorative corner drawing of an abstract bird\" />\r\n                <img className=\"cornerImage topRightCornerImage\" src=\"https://i.ibb.co/j6nyngG/top-Right-Corner.png\" alt=\"a decorative corner drawing of an abstract bird\" />\r\n                <img className=\"cornerImage bottomLeftCornerImage\" src=\"https://i.ibb.co/wLTHwJh/bottom-Left-Corner.png\" alt=\"a decorative corner drawing of an abstract bird\" />\r\n                <img className=\"cornerImage bottomRightCornerImage\" src=\"https://i.ibb.co/BNKzc4S/bottom-Right-Corner.png\" alt=\"a decorative corner drawing of an abstract bird\" />\r\n\r\n                <section className=\"zoltarInstructions\">\r\n                    <p> Zoltar speaks! Tell him your name, choose a category, and give a brief description of what you wish to learn. If you can navigate your coin through Zoltar's maze, he will grant you the advice you seek! </p>\r\n                </section>\r\n\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"userNameInput\">\r\n                        <input type=\"text\" id=\"userName\" placeholder=\"Sam Smith\" required onChange={this.enterUserName} />\r\n                        <label htmlFor=\"userName\" className=\"srOnly\">Type your name here.</label>\r\n                    </div>\r\n\r\n                    <div className=\"userSelectionOptions\" onChange={this.handleSelect}>\r\n                        <input type=\"radio\" name=\"userCategory\" id=\"love\" required/>\r\n                        <label  htmlFor=\"love\"><h2>Love</h2></label>\r\n\r\n                        <input type=\"radio\" name=\"userCategory\" id=\"life\" required/>\r\n                        <label htmlFor=\"life\"><h2>Life</h2></label>\r\n\r\n                        <input type=\"radio\" name=\"userCategory\" id=\"work\" required/>\r\n                        <label  htmlFor=\"work\"><h2>Work</h2></label>\r\n\r\n                        <input type=\"radio\" name=\"userCategory\" id=\"people\" required/>\r\n                        <label htmlFor=\"people\"><h2>Social</h2></label>\r\n\r\n                        <input type=\"radio\" name=\"userCategory\" id=\"happiness\" required/>\r\n                        <label htmlFor=\"happiness\"><h2>Happiness</h2></label>\r\n\r\n                        <input type=\"radio\" name=\"userCategory\" id=\"you\" required/>\r\n                        <label htmlFor=\"you\"><h2>Self</h2></label>\r\n\r\n                        <input type=\"radio\" name=\"userCategory\" id=\"things\" required/>\r\n                        <label  htmlFor=\"things\"><h2>General</h2></label>\r\n\r\n                        <input type=\"radio\" name=\"userCategory\" id=\"good\" required/>\r\n                        <label htmlFor=\"good\"><h2>Feel Good</h2></label>\r\n\r\n                        <input type=\"radio\" name=\"userCategory\" id=\"other\" required/>\r\n                        <label htmlFor=\"other\"><h2>Other</h2></label>\r\n                    </div>\r\n                    \r\n                    <div className=\"userWishInput\" onChange={this.enterUserWish}>\r\n                        <textarea id=\"userWish\" name=\"userWish\" rows=\"4\" cols=\"40\" placeholder = \"I wish to ask the almighty Zoltar what products he uses to style his sick stache.\" required/>\r\n                        <label htmlFor=\"userWish\" className=\"srOnly\">Type your wish here.</label>\r\n                    </div>\r\n\r\n                    <button className=\"formSubmitButton\">Submit Wish</button>\r\n                </form>\r\n\r\n\r\n                {/* Conditionally render the coin only when the submit event is completed (and, therefore, the adviceSlip Array has at least one object in it) */}\r\n                {\r\n                    (this.props.adviceSlip.length === 0)\r\n                    ? null\r\n                    :\r\n                    <Link to=\"/maze\">\r\n                        <div className=\"coinButtonContainer\">\r\n                            <button><img src=\"https://i.ibb.co/0Z6N088/goldCoin.png\" alt=\"a coin with a skull on it\"/></button>\r\n                            <p>Click Me</p>\r\n                        </div> \r\n                    </Link>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Instructions;","const Footer = () => {\r\n    return(\r\n        <footer>\r\n            <p>Created at <a href=\"https://junocollege.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Juno College</a></p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import { Component } from 'react';\r\nimport Header from './components/Header.js'\r\nimport Zoltar from './components/Zoltar.js';\r\nimport Maze from './components/Maze.js';\r\nimport Results from './components/Results.js';\r\nimport Instructions from './components/Instructions.js';\r\nimport Footer from './components/Footer.js';\r\nimport axios from 'axios';\r\nimport { HashRouter, BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './styles/App.scss';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      adviceSlip: [],\r\n      userName: \"\",\r\n    };\r\n  }\r\n\r\n  // Function to call the API which will give us specific advice when user selects a specific category besides 'other'\r\n  getSpecificAdvice = (recivedSelectedCategory) => {\r\n    axios({\r\n      url: `https://api.adviceslip.com/advice/search/${recivedSelectedCategory}`,\r\n      method: \"GET\",\r\n      responseType: \"JSON\",\r\n    }).then((res) => {\r\n      this.setState({\r\n        adviceSlip: res.data.slips,\r\n      });\r\n    });\r\n  };\r\n\r\n  // Function to call the API which will give us random advice when user selects 'other' category\r\n  getRandomAdvice = () => {\r\n    axios({\r\n      url: `https://api.adviceslip.com/advice?timestamp=${new Date().getTime()}`,\r\n      method: \"GET\",\r\n      responseType: \"json\",\r\n    }).then((res) => {\r\n      const newAdvice = [];\r\n      newAdvice.push(res.data.slip);\r\n\r\n      this.setState({\r\n        adviceSlip: newAdvice,\r\n      });\r\n    });\r\n  };\r\n\r\n  // Function to update the userName state with the user's inputted name\r\n  updateName = (recievedUserName) => {\r\n    this.setState({\r\n      userName: recievedUserName\r\n    })\r\n  }\r\n\r\n  // Function to reset the adviceSlip array to an empty array when the user clicks on the the 'make another wish' button (this ensures that, when the user is routed back to the instructions/home page, the coin button used to progress from home to the maze is no longer rendered until the user resubmits the form)\r\n  emptyAdvice =()=>{\r\n    this.setState({\r\n      adviceSlip: []\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <HashRouter>\r\n        <>\r\n          <Header />\r\n          <main>\r\n            <Route \r\n              exact path=\"/\" \r\n              component={Zoltar} \r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/\"\r\n              render={() => {\r\n                return (\r\n                  <Instructions\r\n                    getSpecificAdvice={this.getSpecificAdvice}\r\n                    getRandomAdvice={this.getRandomAdvice}\r\n                    adviceSlip={this.state.adviceSlip}\r\n                    updateName={this.updateName}\r\n                  />\r\n                );\r\n              }}\r\n            />\r\n            <Route \r\n              path=\"/maze\" \r\n              component={Maze} \r\n            />\r\n            <Route\r\n              path=\"/results\"\r\n              render={() => {\r\n                return <Results \r\n                adviceSlip={this.state.adviceSlip}\r\n                userName={this.state.userName} \r\n                emptyAdvice={this.emptyAdvice}\r\n                getRandomAdvice={this.getRandomAdvice}\r\n                />;\r\n              }}\r\n            />\r\n          </main>\r\n          <Footer />\r\n        </>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n// Wassup\r\nexport default App;\r\n\r\n// Merry jobmas\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}